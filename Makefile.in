INSTALL      = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
prefix       = @prefix@
datarootdir  = @datarootdir@
datadir      = @datadir@
infodir      = @infodir@
lispdir      = @lispdir@
srcdir       = @srcdir@
ICONDIR      = @ICONDIR@
ADDITIONAL_LOAD_PATH = @ADDITIONAL_LOAD_PATH@
GZIP_PROG    = @GZIP_PROG@
COMPRESS_INSTALL = @COMPRESS_INSTALL@

SHELL        = /bin/sh

@SET_MAKE@
EMACS   = @EMACS@
VANILLA_FLAG = @VANILLA_FLAG@
FLAGS   = $(VANILLA_FLAG) -batch -l $(srcdir)/w3mhack.el '$(ADDITIONAL_LOAD_PATH)'

IGNORES = w3mhack.el

PACKAGE = emacs-w3m
TARBALL = $(PACKAGE)-$(VERSION).tar.gz
DISTDIR = $(PACKAGE)-$(VERSION)

default: all

all: lisp info

all-en: lisp info-en

all-ja: lisp info-ja

lisp: Makefile
	env test ! -f w3m-util.elc -o w3m-util.elc -nt w3m-util.el || $(MAKE) clean
	env test ! -f w3m-proc.elc -o w3m-proc.elc -nt w3m-proc.el || $(MAKE) clean
	'$(EMACS)' $(FLAGS) -f w3mhack-compile

# `w3mhack-what-where' respects DESTDIR
what-where:
	@'$(EMACS)' $(FLAGS) -f w3mhack-what-where\
	 '$(lispdir)' '$(ICONDIR)' '$(infodir)'

info:
	cd doc && $(MAKE) EMACS="$(EMACS)"

info-en:
	cd doc && $(MAKE) EMACS="$(EMACS)" en

info-ja:
	cd doc && $(MAKE) EMACS="$(EMACS)" ja

install: install-lisp install-info

install-en: install-lisp install-info-en

install-ja: install-lisp install-info-ja

install-lisp: lisp
	@$(SHELL) $(srcdir)/mkinstalldirs "$(DESTDIR)$(lispdir)";\
	for p in ChangeLog ChangeLog.[1-9] ChangeLog.[1-9][0-9] *.el .dir-locals.el; do\
	  if test -f "$$p"; then\
	    case "$$p" in\
	      $(IGNORES)) ;;\
	      *) echo "$(INSTALL_DATA) $$p \"$(DESTDIR)$(lispdir)/$$p\"";\
		$(INSTALL_DATA) $$p "$(DESTDIR)$(lispdir)/$$p";;\
	    esac;\
	    if test $(COMPRESS_INSTALL) = yes -a -n "$(GZIP_PROG)"\
		-a -f "$$p"c -a -f "$(DESTDIR)$(lispdir)/$$p"; then\
		rm -f "$(DESTDIR)$(lispdir)/$$p".gz;\
		"$(GZIP_PROG)" -9n "$(DESTDIR)$(lispdir)/$$p";\
	    fi;\
	  fi;\
	done;\
	for p in *.elc; do\
	  if test -f "$$p"; then\
	    echo "$(INSTALL_DATA) $$p \"$(DESTDIR)$(lispdir)/$$p\"";\
	    $(INSTALL_DATA) $$p "$(DESTDIR)$(lispdir)/$$p";\
	  fi;\
	done;\
	if test -f shimbun/shimbun.elc; then\
	  for p in `cd shimbun && echo ChangeLog ChangeLog.[1-9] ChangeLog.[1-9][0-9]`; do\
	    if test -f "shimbun/$$p"; then\
	      echo "$(INSTALL_DATA) shimbun/$$p \"$(DESTDIR)$(lispdir)/s$$p\"";\
	      $(INSTALL_DATA) shimbun/$$p "$(DESTDIR)$(lispdir)/s$$p";\
	    fi;\
	  done;\
	  for p in `cd shimbun && echo *.el`; do\
	    echo "$(INSTALL_DATA) shimbun/$$p \"$(DESTDIR)$(lispdir)/$$p\"";\
	    $(INSTALL_DATA) shimbun/$$p "$(DESTDIR)$(lispdir)/$$p";\
	    if test $(COMPRESS_INSTALL) = yes -a -n "$(GZIP_PROG)"\
		-a -f "shimbun/$$p"c; then\
		rm -f "$(DESTDIR)$(lispdir)/$$p".gz;\
		"$(GZIP_PROG)" -9n "$(DESTDIR)$(lispdir)/$$p";\
	    fi;\
	  done;\
	  for p in `cd shimbun && echo *.elc`; do\
	    echo "$(INSTALL_DATA) shimbun/$$p \"$(DESTDIR)$(lispdir)/$$p\"";\
	    $(INSTALL_DATA) shimbun/$$p "$(DESTDIR)$(lispdir)/$$p";\
	  done;\
	fi

install-icons:
	@if test "$(ICONDIR)" = NONE; then\
	  echo "You don't have to install icon files for \"$(EMACS)\".";\
	else\
	  $(SHELL) $(srcdir)/mkinstalldirs "$(DESTDIR)$(ICONDIR)";\
	  for i in `cd icons && echo *.gif *.png *.xpm`; do\
	    echo "$(INSTALL_DATA) icons/$$i \"$(DESTDIR)$(ICONDIR)/$$i\"";\
	    $(INSTALL_DATA) icons/$$i "$(DESTDIR)$(ICONDIR)/$$i";\
	  done;\
	fi

install-icons30:
	@if test "$(ICONDIR)" = NONE; then\
	  echo "You don't have to install icon files for \"$(EMACS)\".";\
	else\
	  $(SHELL) $(srcdir)/mkinstalldirs "$(DESTDIR)$(ICONDIR)";\
	  for i in `cd icons30 && echo *.gif *.png *.xpm`; do\
	    echo "$(INSTALL_DATA) icons30/$$i \"$(DESTDIR)$(ICONDIR)/$$i\"";\
	    $(INSTALL_DATA) icons30/$$i "$(DESTDIR)$(ICONDIR)/$$i";\
	  done;\
	fi

install-info: info
	@echo "cd doc && $(MAKE) EMACS=\"$(EMACS)\" infodir=\"$(DESTDIR)$(infodir)\" install";\
	cd doc && $(MAKE) EMACS="$(EMACS)" infodir="$(infodir)" install

install-info-en: info-en
	@echo "cd doc && $(MAKE) EMACS=\"$(EMACS)\" infodir=\"$(DESTDIR)$(infodir)\" install-en";\
	cd doc && $(MAKE) EMACS="$(EMACS)" infodir="$(infodir)" install-en

install-info-ja: info-ja
	@echo "cd doc && $(MAKE) EMACS=\"$(EMACS)\" infodir=\"$(DESTDIR)$(infodir)\" install-ja";\
	cd doc && $(MAKE) EMACS="$(EMACS)" infodir="$(infodir)" install-ja

Makefile: Makefile.in config.status
	$(srcdir)/config.status

config.status: configure
	$(srcdir)/config.status --recheck

configure: configure.ac aclocal.m4
	autoconf

dist: Makefile w3m.elc
	$(MAKE) tarball \
	  VERSION=`'$(EMACS)' $(FLAGS) -f w3mhack-version 2>/dev/null` \
	  BRANCH=`cvs status Makefile.in|grep "Sticky Tag:"|awk '{print $$3}'|sed 's,(none),HEAD,'`

tarball: CVS/Root CVS/Repository
	-rm -rf $(DISTDIR) $(TARBALL) `basename $(TARBALL) .gz`
	cvs -d `cat CVS/Root` -w export -d $(DISTDIR) -r $(BRANCH) `cat CVS/Repository`
	-cvs diff |( cd $(DISTDIR) && patch -p0 )
	for f in BUGS.ja; do\
	  if [ -f $(DISTDIR)/$${f} ]; then\
	    rm -f $(DISTDIR)/$${f} || exit 1;\
	  fi;\
	done
	find $(DISTDIR) -name .cvsignore | xargs rm -f
	find $(DISTDIR) -type d | xargs chmod 755
	find $(DISTDIR) -type f | xargs chmod 644
	cd $(DISTDIR) && autoconf
	chmod 755 $(DISTDIR)/configure $(DISTDIR)/install-sh
	tar -cf `basename $(TARBALL) .gz` $(DISTDIR)
	"$(GZIP_PROG)" -9 `basename $(TARBALL) .gz`
	rm -rf $(DISTDIR)

clean:
	-rm -f *~ *.elc shimbun/*.elc w3m-load.el;\
	cd doc && $(MAKE) clean

distclean: clean
	-rm -f config.log config.status config.cache Makefile doc/Makefile;\
	rm -fr autom4te*.cache

## Rules for the developers to check the portability for each module.
.SUFFIXES: .elc .el

.el.elc:
	@echo $(EMACS) $(FLAGS) -f batch-byte-compile $*.el;\
	'$(EMACS)' $(FLAGS) -f batch-byte-compile $*.el

slow: Makefile
	@for i in `'$(EMACS)' $(FLAGS) -f w3mhack-examine-modules 2>/dev/null`;\
	do $(MAKE) -s $$i; done

very-slow: clean Makefile
	@args="$(VANILLA_FLAG) -batch";\
	args="$$args -l $(srcdir)/attic/addpath.el '$(ADDITIONAL_LOAD_PATH)'";\
	ename=`echo '$(EMACS)'| sed 's:.*/::g'`;\
	echo "=============================================";\
	echo "Compiling the 1st stage-----without elc files";\
	echo "=============================================";\
	echo "EMACS=$(EMACS)";\
	echo "ARGS=$$args";\
	for i in `$(EMACS) $(FLAGS) -f w3mhack-examine-modules 2>/dev/null`;\
	  do\
	  j=`echo $$i| sed 's/elc$$/el/g'`;\
	  echo $$ename ARGS -f batch-byte-compile $$j;\
	  '$(EMACS)' $$args -f batch-byte-compile $$j;\
	  mv $$i $$j"x";\
	done;\
	for i in `echo *.elx shimbun/*.elx`; do\
	  j=`echo $$i| sed 's/elx$$/elc/g'`;\
	  if test -f $$i; then mv $$i $$j; fi;\
	done;\
	echo "==============================================";\
	echo "Compiling the 2nd stage-----with all elc files";\
	echo "==============================================";\
	echo "EMACS=$(EMACS)";\
	echo "ARGS=$$args";\
	for i in `'$(EMACS)' $(FLAGS) -f w3mhack-examine-modules 2>/dev/null`;\
	  do\
	  j=`echo $$i| sed 's/elc$$/el/g'`;\
	  echo $$ename ARGS -f batch-byte-compile $$j;\
	  '$(EMACS)' $$args -f batch-byte-compile $$j;\
	done
